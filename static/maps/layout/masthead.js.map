{"version":3,"sources":["layout/masthead.js"],"names":["Backbone","View","extend","initialize","options","self","this","setElement","_template","$navbarBrandLink","$","$navbarBrandImage","$navbarBrandTitle","$navbarTabs","$quoteMeter","collection","Menu","Collection","on","model","append","Tab","render","$el","empty","callback","each","m","fetch","highlight","active_view","Galaxy","frame","Scratchbook","quotaMeter","QuotaMeter","UserQuotaMeter","el","window","e","length","attr","$download_link","preventDefault","text","q","brand","logo_url","id"],"mappings":"uPAAYA,kLASRC,EAAOD,EAASC,KAAKC,QACrBC,WAAY,SAASC,GACjB,IAAIC,EAAOC,KACXA,KAAKF,QAAUA,EACfE,KAAKC,WAAWD,KAAKE,aACrBF,KAAKG,iBAAmBH,KAAKI,EAAE,iBAC/BJ,KAAKK,kBAAoBL,KAAKI,EAAE,uBAChCJ,KAAKM,kBAAoBN,KAAKI,EAAE,uBAChCJ,KAAKO,YAAcP,KAAKI,EAAE,eAC1BJ,KAAKQ,YAAcR,KAAKI,EAAE,0BAG1BJ,KAAKS,WAAa,IAAIC,EAAAA,QAAKC,WAC3BX,KAAKS,WACAG,GAAG,MAAO,SAAAC,GACPd,EAAKQ,YAAYO,OAAO,IAAIJ,EAAAA,QAAKK,KAAMF,MAAOA,IAASG,SAASC,OAEnEL,GAAG,QAAS,WACTb,EAAKQ,YAAYW,UAEpBN,GAAG,WAAY,SAAAO,GACZpB,EAAKU,WAAWW,KAAK,SAAAC,GACjBF,EAASE,OAGhBC,MAAMtB,KAAKF,SAGhBE,KAAKuB,UAAUzB,EAAQ0B,aAGvBC,OAAOC,MAAQ1B,KAAK0B,MAAQ,IAAIC,EAAAA,SAhCxClB,WAAAT,KAAAS,aAKQgB,OAAAG,WAAgB5B,KAAKE,WAArB,IAAA2B,EAAAA,QAAAC,gBACAjB,MAAKV,OAAAA,KACL4B,GAAA/B,KAAKK,cAqCLD,EAAE4B,QAhCFpB,GAAA,QAAA,SAAAqB,GACA,IAAKxB,EAAiBC,EAAAA,EAAAA,QAAKC,QAAAA,eAEZ,GADVF,EACGyB,SACiCnB,IAA5BR,EAAAA,uBAAuBG,QAE5BN,EAJR,QAIiBU,OACJP,EAAAA,aAEO4B,KAAA,KAAA,YACIf,QARxBhB,EAYW,uBAZX+B,KAAA,MAAAC,EAAAD,KAAA,SA0CYF,EAAEI,oBAGTzB,GAAG,eAAgB,WA5BxB,IAAA0B,EAAA,GAOAb,GANAA,EAAOC,WAAaA,KAAL,SAAAb,GACXJ,IAAAA,EAAYI,EAAKJ,IAAAA,mBAAAA,EAAAA,IAAAA,iBAAAA,GADrB8B,IAgCgBD,GAAWC,EAAX,OA1BhB,KAAOX,EACHf,OAAOY,KAKXrB,OAAAA,WAWYA,OARJJ,KAAAM,kBAAI8B,MAAeF,KAAUpC,QAAG0C,OAAAxC,KAAAF,QAAA0C,MAAbN,MAAa,KAAhC,WACIlC,KAAAG,iBAAMgC,KAAA,OAAAnC,KAAFF,QAAA2C,UACArC,KAAAA,kBAAE+B,KAAQrB,MACJd,KAAAF,QACGqC,UAGZnC,KAAA4B,WAAAZ,SACDZ,MAGPmB,UACAX,SAAG8B,GACA1C,KAAAS,WAAI6B,QAAJ,SAAAzB,GACAd,EAAAA,IAAKU,SAAWW,EAAKsB,IAAAA,MAKpBxC,UAAA,WACD,MAAA,+ZAaXP,KA/E2BA","file":"../../scripts/layout/masthead.js","sourcesContent":["import * as Backbone from \"backbone\";\nimport Menu from \"layout/menu\";\nimport Scratchbook from \"layout/scratchbook\";\nimport QuotaMeter from \"mvc/user/user-quotameter\";\n\n/* global Galaxy */\n/* global $ */\n\n/** Masthead **/\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.options = options;\n        this.setElement(this._template());\n        this.$navbarBrandLink = this.$(\".navbar-brand\");\n        this.$navbarBrandImage = this.$(\".navbar-brand-image\");\n        this.$navbarBrandTitle = this.$(\".navbar-brand-title\");\n        this.$navbarTabs = this.$(\".navbar-nav\");\n        this.$quoteMeter = this.$(\".quota-meter-container\");\n\n        // build tabs\n        this.collection = new Menu.Collection();\n        this.collection\n            .on(\"add\", model => {\n                self.$navbarTabs.append(new Menu.Tab({ model: model }).render().$el);\n            })\n            .on(\"reset\", () => {\n                self.$navbarTabs.empty();\n            })\n            .on(\"dispatch\", callback => {\n                self.collection.each(m => {\n                    callback(m);\n                });\n            })\n            .fetch(this.options);\n\n        // highlight initial active view\n        this.highlight(options.active_view);\n\n        // scratchbook\n        Galaxy.frame = this.frame = new Scratchbook({\n            collection: this.collection\n        });\n\n        // set up the quota meter (And fetch the current user data from trans)\n        // add quota meter to masthead\n        Galaxy.quotaMeter = this.quotaMeter = new QuotaMeter.UserQuotaMeter({\n            model: Galaxy.user,\n            el: this.$quoteMeter\n        });\n\n        // loop through beforeunload functions if the user attempts to unload the page\n        $(window)\n            .on(\"click\", e => {\n                var $download_link = $(e.target).closest(\"a[download]\");\n                if ($download_link.length == 1) {\n                    if ($(\"iframe[id=download]\").length === 0) {\n                        $(\"body\").append(\n                            $(\"<iframe/>\")\n                                .attr(\"id\", \"download\")\n                                .hide()\n                        );\n                    }\n                    $(\"iframe[id=download]\").attr(\"src\", $download_link.attr(\"href\"));\n                    e.preventDefault();\n                }\n            })\n            .on(\"beforeunload\", () => {\n                var text = \"\";\n                self.collection.each(model => {\n                    var q = model.get(\"onbeforeunload\") && model.get(\"onbeforeunload\")();\n                    if (q) {\n                        text += `${q} `;\n                    }\n                });\n                if (text !== \"\") {\n                    return text;\n                }\n            });\n    },\n\n    render: function() {\n        // this.$navbarBrandTitle.html(`Galaxy ${(this.options.brand && `/ ${this.options.brand}`) || \"\"}`);\n        this.$navbarBrandTitle.html(`${(this.options.brand && `${this.options.brand} /`) || \" \"} Galaxy`);\n        this.$navbarBrandLink.attr(\"href\", this.options.logo_url);\n        this.$navbarBrandImage.attr(\"src\", this.options.logo_src);\n        this.quotaMeter.render();\n        return this;\n    },\n\n    highlight: function(id) {\n        this.collection.forEach(function(model) {\n            model.set(\"active\", model.id == id);\n        });\n    },\n\n    /** body template */\n    _template: function() {\n        return `\n            <nav id=\"masthead\" class=\"navbar navbar-expand fixed-top justify-content-center navbar-dark\">\n                <a class=\"navbar-brand\">\n                    <img class=\"navbar-brand-image\"/>\n                    <span class=\"navbar-brand-title\"/>\n                </a>\n                <ul class=\"navbar-nav\"/>\n                <div class=\"quota-meter-container\"/>\n            </nav>`;\n    }\n});\n\nexport default {\n    View: View\n};\n"]}